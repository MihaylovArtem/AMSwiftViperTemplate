//
//  {{ module_info.file_name }}
//  {{ module_info.project_name }}, {{ module_info.name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import XCTest
@testable import {{ module_info.project_name }}

class {{ prefix }}{{ module_info.name }}ModuleWireframeTests: XCTestCase {

    override func setUp() {
        super.setUp()
    }

    override func tearDown() {
        super.tearDown()
    }

    func testConfigureModuleForViewController() {
        let viewController = {{ prefix }}{{ module_info.name }}ViewControllerMock()
        let wireframe = {{ prefix }}{{ module_info.name }}Wireframe()

        wireframe.configureModuleForViewInput(viewInput: viewController)

        XCTAssertNotNil(viewController.output, "{{ prefix }}{{ module_info.name }}ViewController is nil after configuration")
        XCTAssertTrue(viewController.output is {{ prefix }}{{ module_info.name }}Presenter, "output is not {{ prefix }}{{ module_info.name }}Presenter")

        let presenter: {{ prefix }}{{ module_info.name }}Presenter = viewController.output as! {{ prefix }}{{ module_info.name }}Presenter
        XCTAssertNotNil(presenter.view, "view in {{ prefix }}{{ module_info.name }}Presenter is nil after configuration")
        XCTAssertNotNil(presenter.router, "router in {{ prefix }}{{ module_info.name }}Presenter is nil after configuration")
        XCTAssertTrue(presenter.router is {{ prefix }}{{ module_info.name }}Router, "router is not {{ prefix }}{{ module_info.name }}Router")

        let interactor: {{ prefix }}{{ module_info.name }}Interactor = presenter.interactor as! {{ prefix }}{{ module_info.name }}Interactor
        XCTAssertNotNil(interactor.output, "output in {{ prefix }}{{ module_info.name }}Interactor is nil after configuration")
    }

    class {{ prefix }}{{ module_info.name }}ViewControllerMock: {{ prefix }}{{ module_info.name }}ViewController {

        var setupInitialStateDidCall = false

        override func setupInitialState() {
            setupInitialStateDidCall = true
        }
    }
}
