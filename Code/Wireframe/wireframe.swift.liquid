//
//  {{ module_info.file_name }}
//  {{ module_info.project_name }}, {{ module_info.name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import UIKit

class {{ prefix }}{{ module_info.name }}Wireframe: NSObject {

    /// Contains view controller of this Viper module (default or custom)
    weak var viewController: (UIViewController & {{ prefix }}{{ module_info.name }}ViewInput)?

    /// Contains custom view of viper module (if nil, default view for this module will be used)
    public var customView: (UIViewController & {{ prefix }}{{ module_info.name }}ViewInput)?

    /// Contains custom presenter of viper module (if nil, default presenter for this module will be used)
    public var customPresenter: ({{ prefix }}{{ module_info.name }}InteractorOutput & {{ prefix }}{{ module_info.name }}ViewOutput & {{ prefix }}{{ module_info.name }}ModuleInput)?

    /// Contains custom interactor of viper module (if nil, default interactor for this module will be used)
    public var customInteractor: {{ prefix }}{{ module_info.name }}InteractorInput?

    /// Contains custom router of viper module (if nil, default router for this module will be used)
    public var customRouter: {{ prefix }}{{ module_info.name }}RouterInput?

    /// Module initialization, after calling this method, you can use viewController property to get access to module's view controller
    func initModule() {
        viewController = customView ?? (UIStoryboard(name: "<#Storyboard name#>", bundle: nil).instantiateViewController(withIdentifier: "<#VC identifier#>") as? {{ prefix }}{{ module_info.name }}ViewController)
        if let vc = viewController {
            let router = customRouter ?? {{ prefix }}{{ module_info.name }}Router()
            let presenter = customPresenter ?? {{ prefix }}{{ module_info.name }}Presenter()
            var interactor = customInteractor ?? {{ prefix }}{{ module_info.name }}Interactor()

            presenter.view = vc
            presenter.router = router
            presenter.interactor = interactor

            interactor.output = presenter

            vc.output = presenter
        }
    }

}
